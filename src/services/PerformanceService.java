package services;

import java.io.*;
import java.util.*;
import models.Performance;

public class PerformanceService {
    private static final String FILE_PATH = "src/database/Performance.txt";
    private final Scanner sc = new Scanner(System.in);

    public List<Performance> getAllPerformances() {
        List<Performance> performances = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(FILE_PATH))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length == 4) {
                    performances.add(new Performance(
                            Integer.parseInt(parts[0]),
                            parts[1],
                            Integer.parseInt(parts[2]),
                            Integer.parseInt(parts[3])
                    ));
                }
            }
        } catch (IOException e) {
            System.err.println("‚ö†Ô∏è L·ªói khi ƒë·ªçc file ti·∫øt m·ª•c: " + e.getMessage());
        }
        return performances;
    }

    private void saveAllPerformances(List<Performance> performances) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_PATH))) {
            for (Performance p : performances) {
                bw.write(p.getId() + "|" + p.getName() + "|" + p.getDuration() + "|" + p.getArtistId());
                bw.newLine();
            }
        } catch (IOException e) {
            System.err.println("‚ö†Ô∏è L·ªói khi ghi file ti·∫øt m·ª•c: " + e.getMessage());
        }
    }

    public void showAllPerformances() {
        List<Performance> list = getAllPerformances();
        if (list.isEmpty()) {
            System.out.println("‚ùå Kh√¥ng c√≥ ti·∫øt m·ª•c n√†o.");
            return;
        }
        System.out.printf("%-5s %-20s %-10s %-10s%n", "ID", "T√™n", "Th·ªùi l∆∞·ª£ng", "Ngh·ªá sƒ© ID");
        list.forEach(System.out::println);
    }

    public void addPerformanceFromInput() {
        List<Performance> list = getAllPerformances();
        System.out.print("Nh·∫≠p ID ti·∫øt m·ª•c: ");
        int id = sc.nextInt(); sc.nextLine();
        System.out.print("T√™n ti·∫øt m·ª•c: ");
        String name = sc.nextLine();
        System.out.print("Th·ªùi l∆∞·ª£ng (ph√∫t): ");
        int duration = sc.nextInt();
        System.out.print("ID ngh·ªá sƒ©: ");
        int artistId = sc.nextInt(); sc.nextLine();

        list.add(new Performance(id, name, duration, artistId));
        saveAllPerformances(list);
        System.out.println("‚úÖ ƒê√£ th√™m ti·∫øt m·ª•c!");
    }

    public void deletePerformanceByInput() {
        List<Performance> list = getAllPerformances();
        System.out.print("Nh·∫≠p ID c·∫ßn x√≥a: ");
        int id = sc.nextInt(); sc.nextLine();
        boolean removed = list.removeIf(p -> p.getId() == id);
        saveAllPerformances(list);
        System.out.println(removed ? "üóëÔ∏è ƒê√£ x√≥a ti·∫øt m·ª•c!" : "‚ùå Kh√¥ng t√¨m th·∫•y!");
    }

    public void updatePerformanceFromInput() {
        List<Performance> list = getAllPerformances();
        System.out.print("Nh·∫≠p ID c·∫ßn s·ª≠a: ");
        int id = sc.nextInt(); sc.nextLine();

        Performance found = list.stream().filter(p -> p.getId() == id).findFirst().orElse(null);
        if (found == null) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y ti·∫øt m·ª•c!");
            return;
        }

        System.out.print("T√™n m·ªõi: ");
        String name = sc.nextLine();
        System.out.print("Th·ªùi l∆∞·ª£ng m·ªõi: ");
        int duration = sc.nextInt();
        System.out.print("ID ngh·ªá sƒ© m·ªõi: ");
        int artistId = sc.nextInt(); sc.nextLine();

        list.set(list.indexOf(found), new Performance(id, name, duration, artistId));
        saveAllPerformances(list);
        System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ti·∫øt m·ª•c!");
    }
}
